Symphony Overview
=================

Symphony is a system for running electrophysiology experiments.


Starting Symphony
-----------------

After installing all of the necessary pieces (see Installation.txt) start up Symphony by running the 
StartSymphony.m script from the MATLAB command window:

    >> StartSymphony

If you run into problems be sure to look at Troubleshooting.txt.


Customizing Symphony
--------------------

There are four areas where Symphony can be customized: rig configurations, protocols, figure handlers and 
the source hierarchy.

Rig configurations define how the components of a rig are connected.  This includes the DAQ controller and 
all connected devices.  See Rig Configurations.txt for more information on creating your own.

Protocols define the series of stimuli that will be presented to the connected devices and which responses 
should be recorded.  They can also present figure windows to display any results.  See Protocols.txt for 
more information on creating your own protocols.

Figure handlers are shared by protocols and graphically present any desired data, for example the response 
of a device from the most recent epoch or statistics gathered across all epochs run so far.  See Figure 
Handlers.txt for more information on using the existing handlers or creating your own.

The source hierarchy defines the list of available experimental subjects and their hierarchical relationship.
See Saving Data.txt for more information on creating your own.

High-level descriptions of the main source files
------------------------------------------------

StartSymphony.m:
    adds Symphony folders to the MATLAB path
    calls addSymphonyFramework() to load the Symphony .NET framework
	calls the symconfig.m script to configure user specific locations for rig configurations, protocol, etc.
    creates the Symphony object to launch the GUI


Symphony.m:
    This class is responsible for:
        - managing the main user interface
        - managing the current rig configuration
        - managing epoch groups
        - managing the current protocol
    
    All persistant data (rig configuration, protocol, etc.) is stored as properties of the Symphony object.
    
    showMainWindow():
        creates a default rig configuration
        creates a default protocol
        builds and displays the user interface
    
    startAcquisition():
        makes sure the user has set protocol parameters
        grabs current values from the UI
        tells the current protocol to start running
    
    pauseAcquisition():
        tells the current protocol to pause after the current epoch completes
    
    stopAcquisition():
        tells the current protocol to stop after the current epoch completes


newEpochGroup.m:
    GUI for entering parameters of an epoch group


EpochGroup.m:
Source.m:
    Classes to manage persistence of metadata.

	
editParameters.m:
    Dynamic GUI for editing the parameters of a protocol.


RigConfiguration.m:
    Base class that provides simple mechanism for specifying which devices are connected to a rig.


SymphonyProtocol.m:
    Base class that provides default behaviors for experimental protocols.  All protocols must be sub-classes of this class.
    See the Protocols.txt file for details on implementing a new protocol.


FigureHandler.m:
    Base class that provides default behaviors for displaying figures.
    See the Figure Handlers.txt file for details on using existing handlers or implementing new ones.
	

ParameterProperty.m:
	Class that describes protocol parameters.